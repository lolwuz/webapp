@* Remove this section if you are using bundling *@
@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}

@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Log in";

    // Initialize general page variables
    var email = "";
    var password = "";
    var rememberMe = false;

    var returnUrl = Request.QueryString["ReturnUrl"];
    if (returnUrl.IsEmpty())
    {
        // Some external login providers always require a return URL value
        returnUrl = Href("~/List.cshtml");
    }

    // Setup validation
    Validation.RequireField("email", "You must specify an email address.");
    Validation.RequireField("password", "You must specify a password.");
    Validation.Add("password",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "Password must be at least 6 characters"));

    // If this is a POST request, validate and process data
    if (IsPost)
    {
        AntiForgery.Validate();
        // is this an external login request?
        string provider = Request.Form["provider"];
        if (!provider.IsEmpty())
        {
            OAuthWebSecurity.RequestAuthentication(provider, Href("~/Account/RegisterService", new { returnUrl }));
            return;
        }
        else if (Validation.IsValid())
        {
            email = Request.Form["email"];
            password = Request.Form["password"];
            rememberMe = Request.Form["rememberMe"].AsBool();

            if (WebSecurity.UserExists(email) && WebSecurity.GetPasswordFailuresSinceLastSuccess(email) > 4 && WebSecurity.GetLastPasswordFailureDate(email).AddSeconds(60) > DateTime.UtcNow)
            {
                Response.Redirect("~/Account/AccountLockedOut");
                return;
            }

            // Attempt to log in using provided credentials
            if (WebSecurity.Login(email, password, rememberMe))
            {
                Context.RedirectLocal(returnUrl);
                return;
            }
            else
            {
                ModelState.AddFormError("The user name or password provided is incorrect.");
            }
        }
    }
}


<div class="container">
    <div class="row">  
        <div class="col-sm-6 col-sm-offset-3">
            <div class="logincard">
                <h4 class="text-center"> Inloggen met een E-Books Online account</h4>
                <hr />
                <form method="post">
                    @AntiForgery.GetHtml()
                    @* If one or more validation errors exist, show an error *@
                    @Html.ValidationSummary("Log in was unsuccessful. Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null)

                    <fieldset>
                        @*<label for="email" @if (!ModelState.IsValidField("email")) { <text> class="error-label" </text>  }>Email address</label>*@
                        <div class="input-group">
                            <span class="input-group-addon" id="sizing-addion1">&#64;</span>
                            <input type="text" class="form-control" placeholder="example@provider.com" name="email" value="@email" @Validation.For("email") />
                        </div>
                        
                        @* Write any user name validation errors to the page *@
                        @Html.ValidationMessage("email")

                        <br />

                        @*<label for="password" @if (!ModelState.IsValidField("password")) { <text> class="error-label" </text>  }>Password</label>*@
                        <div class="input-group">      
                            <input type="password" class="form-control" placeholder="Password" name="password" @Validation.For("password") />
                            <span class="input-group-addon">
                                <text>Onthouden</text>
                                <input type="checkbox" form="rememberMe">
                            </span>
                        </div>

                        @* Write any password validation errors to the page *@
                        @Html.ValidationMessage("password")

                        <br />

                        <input class="btn btn-succes" type="submit" value="Log in" />
                    </fieldset>
                </form>
                <hr />
                <div>
                    <p>
                        <a class="btn btn-default" href="~/Account/Register">Don't have a Account?</a>
                        <a class="btn btn-default" href="~/Account/ForgotPassword">Did you forget your password?</a>
                    </p>
                </div>
            </div>

        </div>
    </div>
</div>


<section class="social" id="socialLoginForm">
    <h2>Use another service to log in.</h2>
    @RenderPage("~/Account/_ExternalLoginsList.cshtml")
</section>
