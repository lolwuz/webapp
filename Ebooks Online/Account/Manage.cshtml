@using WebMatrix.WebData

@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}

@{
    WebSecurity.RequireAuthenticatedUser();

    Layout = "~/_BookListLayout.cshtml";
    Page.Title = "Beheer Account";

    var action = Request.Form["action"];

    bool hasLocalAccount = OAuthWebSecurity.HasLocalAccount(WebSecurity.CurrentUserId);

    string successMessage = "";
    var message = Request.QueryString["message"];
    if (message == "ChangedPassword") {
        successMessage = "Uw wachtwoord is veranderd.";
    } else if (message == "SetPassword") {
        successMessage = "Uw wachtwoord is ingesteld.";
    } else if (message == "RemovedLogin") {
        successMessage = "De externe login is verwijderd.";
    }

    var externalLogins =
        (from account in OAuthWebSecurity.GetAccountsFromUserName(WebSecurity.CurrentUserName)
         let clientData = OAuthWebSecurity.GetOAuthClientData(account.Provider)
         select new { Provider = account.Provider, ProviderDisplayName = clientData.DisplayName, UserId = account.ProviderUserId })
        .ToList();
    bool canRemoveLogin = externalLogins.Count > 1 || hasLocalAccount;

    // Setup validation
    if (hasLocalAccount) {
        Validation.RequireField("currentPassword", "Het huidige wachtwoord moet ingevuld worden.");
        Validation.Add("currentPassword",
            Validator.StringLength(
                maxLength: Int32.MaxValue,
                minLength: 6,
                errorMessage: "Het huidige wachtwoord moet minstens 6 characters lang zijn."));
    }
    Validation.RequireField("newPassword", "Het nieuwe wachtwoord moet ingevuld worden.");
    Validation.Add("confirmPassword",
        Validator.Required("Het herhaal wachtwoord moet ingevuld worden."),
        Validator.EqualsTo("newPassword", "Het nieuwe wachtwoord en herhaal wachtwoord komen niet overeen."));
    Validation.Add("newPassword",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "Het nieuwe wachtwoord moet minstens 6 characters lang zijn."));

    if (IsPost) {
        AntiForgery.Validate();
        if (action == "password") {
            // Handle local account password operations
            var currentPassword = Request.Form["currentPassword"];
            var newPassword = Request.Form["newPassword"];
            var confirmPassword = Request.Form["confirmPassword"];

            if (Validation.IsValid()) {
                if (hasLocalAccount) {
                    if (WebSecurity.ChangePassword(WebSecurity.CurrentUserName, currentPassword, newPassword)) {
                        Response.Redirect("~/Account/Manage?message=ChangedPassword");
                        return;
                    } else {
                        ModelState.AddFormError("Er is een fout opgetreden bij het veranderen van het wachtwoord. Neem contact op met de site beheerder.");
                    }
                } else {
                    bool requireEmailConfirmation = !WebMail.SmtpServer.IsEmpty();
                    try {
                        WebSecurity.CreateAccount(WebSecurity.CurrentUserName, newPassword, requireEmailConfirmation);
                        Response.Redirect("~/Account/Manage?message=SetPassword");
                        return;
                    } catch (System.Web.Security.MembershipCreateUserException e) {
                        ModelState.AddFormError(e.Message);
                    }
                }
            } else {
                ModelState.AddFormError("Het wachtwoord veranderen is mislukt. Verbeter de fouten en probeer het opnieuw.");
            }
        } else if (action == "removeLogin") {
            // Remove external login
            var provider = Request.Form["provider"];
            var userId = Request.Form["userId"];

            message = null;
            var ownerAccount = OAuthWebSecurity.GetUserName(provider, userId);
            // Only remove the external login if it is owned by the currently logged in user and it is not the users last login credential
            if (ownerAccount == WebSecurity.CurrentUserName && canRemoveLogin) {
                OAuthWebSecurity.DeleteAccount(provider, userId);
                message = "RemovedLogin";
            }
            Response.Redirect(Href("~/Account/Manage", new { message }));
            return;
        } else {
            // Assume this an external login request
            string provider = Request.Form["provider"];
            if (!provider.IsEmpty()) {
                OAuthWebSecurity.RequestAuthentication(provider, Href("~/Account/RegisterService", new { returnUrl = Href("~/Account/Manage") }));
                return;
            }
        }
    }
}



<div class="container">
    <div class="row">
        <div class="col-sm-6 col-sm-offset-3">
            <div class="logincard">

                @if (!successMessage.IsEmpty())
                {
                    <p class="message-success">
                        @successMessage
                    </p>
                }

                <p>Je bent ingelogd als <strong>@WebSecurity.CurrentUserName</strong>.</p>

                @if (hasLocalAccount)
                {
                    <h4>Bewerk mijn account.</h4>
                }
                else
                {
                    <p>
                        U heeft geen lokaal wachtwoord voor deze site. Voeg een lokaal wachtwoord toe zodat u kunt inloggen zonder externe login.
                    </p>
                }

                <hr />

                <form method="post">
                    @AntiForgery.GetHtml()
                    @Html.ValidationSummary(excludeFieldErrors: true)
                    <fieldset>
                       
                        @if (hasLocalAccount)
                        {
                            <h5>Verander je wachtwoord.</h5>
                        }
                        else
                        {
                            <h5>Stel je wachtwoord in voor een lokaal account.</h5>
                        }
                        
                        <br />

                        @if (hasLocalAccount)
                        {
                            <label for="currentPassword" @if (!ModelState.IsValidField("currentPassword")) { <text> class="error-label" </text> }>Huidig wachtwoord</label>
                            <div class="input-group">
                                <input class="form-control" type="password" id="currentPassword" name="currentPassword" @Validation.For("currentPassword") />
                            </div>
                            @Html.ValidationMessage("currentPassword")
                        }

                        <label for="newPassword" @if (!ModelState.IsValidField("newPassword")) { <text> class="error-label" </text> }>Nieuw wachtwoord</label>
                        <div class="input-group">
                            <input class="form-control" type="password" id="newPassword" name="newPassword" @Validation.For("newPassword") />
                        </div>
                        @Html.ValidationMessage("newPassword")


                        <label for="confirmPassword" @if (!ModelState.IsValidField("confirmPassword")) { <text> class="error-label" </text> }>Herhaal wachtwoord</label>
                        <div class="input-group">
                            <input class="form-control" type="password" id="confirmPassword" name="confirmPassword" @Validation.For("confirmPassword") />
                        </div>
                        @Html.ValidationMessage("confirmPassword")

                        <hr />

                        @if (hasLocalAccount)
                        {
                            <button class="btn btn-danger accent-color" type="submit" name="action" value="password">Verander wachtwoord</button>
                            <a class="btn btn-default" href="~/Account/ForgotPassword.cshtml">Ik ben mijn wachtwoord vergeten</a>
                        }
                        else
                        {
                            <button class="btn btn-danger accent-color" type="submit" name="action" value="password">Stel wachtwoord in.</button>
                        }
                    </fieldset>
                </form>
            </div>
        </div>
    </div>
</div>


<section id="externalLogins">
    @if (externalLogins.Count > 0) {
        <h3>Geregistreerde externe logins</h3>
        <table>
            <tbody>
            @foreach (var externalLogin in externalLogins) {
                <tr>
                    <td>@externalLogin.ProviderDisplayName</td>
                    <td>
                        @if (canRemoveLogin) {
                            <form method="post">
                                @AntiForgery.GetHtml()
                                <fieldset>
                                    <legend></legend>
                                    <input type="hidden" name="provider" value="@externalLogin.Provider" />
                                    <input type="hidden" name="userId" value="@externalLogin.UserId" />
                                    <button type="submit" name="action" value="removeLogin" title="Remove this @externalLogin.ProviderDisplayName credential from your account">Verwijder</button>
                                </fieldset>
                            </form>
                        } else {
                            @: &nbsp;
                        }
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }

    <h3>Voeg een externe login toe</h3>
    @RenderPage("~/Account/_ExternalLoginsList.cshtml")
</section>
