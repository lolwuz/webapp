@using Microsoft.Web.Helpers;
@using System.Globalization;
@using System.Text.RegularExpressions;
@using PdfUtils;
@using iTextSharp;
@using iTextSharp.text;
@using iTextSharp.text.pdf;
@{
    //Include BooksListLayout.
    Layout = "~/_BookListLayout.cshtml";
    //Athentication check on user.
    if (!WebSecurity.IsAuthenticated)
    {
        Response.Redirect("~/default.cshtml");
    }

    //Initialize Variables.
    var goodfile = Session["goodfile"];
    var filetype = "";
    var fileName = "";
    var publisher = "-";
    var language = "-";
    var tags = "-";
    var bookserie = "-";
    var type = "";
    var filesize = 0;
    var genre = "-";
    HttpPostedFileBase uploadedFile = null;
    Dictionary<String, String> metadata = new Dictionary<String, String>();

    if (IsPost)
    {
        //If IsPost and button 'fileupload' doesn't exist.
        if (Request.Form["fileupload"] == null)
        {
            //Get the uploaded file
            uploadedFile = Request.Files[0];
            Random rnd = new Random();
            filesize = (uploadedFile.ContentLength / 1024) / 1024;
            type = uploadedFile.FileName.Split('.')[1];
            fileName = Path.GetFileName(uploadedFile.FileName);
            var fileSavePath = Server.MapPath("~/Books/Files/temp/" + rnd.Next(1, 9999) +
               fileName);
            uploadedFile.SaveAs(fileSavePath);
            //Added uploaded file into temp with random number. 1-9999 chance you would have the same filename in the temp folder.
            filetype = fileSavePath.Split('.')[1];
            Session["goodfile"] = "";
            string convertTypeA = "";
            string convertTypeB = "";
            ///Validation on file type. You can only upload pdf, epub or mobi.
            if (filetype != "pdf" && filetype != "epub" && filetype != "mobi")
            {
                Session["goodfile"] = "Je moet wel een pdf, epub of mobi bestand uploaden!";
                Response.Redirect("~/Books/BooksAdd.cshtml");
            }
            else
            {
                //Convert Part
                //Set convert variables. Depends on what the original file type is.
                if (filetype == "pdf")
                {
                    convertTypeA = "epub";
                    convertTypeB = "mobi";
                }
                if (filetype == "epub")
                {
                    convertTypeA = "pdf";
                    convertTypeB = "mobi";

                }
                if (filetype == "mobi")
                {
                    convertTypeA = "pdf";
                    convertTypeB = "epub";
                }

                //Start Convert 1. The original file will be converted into the value of 'convertTypeA'.
                var fileSavePathConvertA = fileSavePath.Split('.')[0] + "." + convertTypeA;

                System.Diagnostics.Process processA = new System.Diagnostics.Process();
                System.Diagnostics.ProcessStartInfo startInfoA = new System.Diagnostics.ProcessStartInfo();
                startInfoA.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                startInfoA.FileName = Server.MapPath("~/Books/Calibre Portable/Calibre/") + "ebook-convert.exe";
                startInfoA.Arguments = "\"" + fileSavePath + "\" \"" + fileSavePathConvertA + "\"";
                processA.StartInfo = startInfoA;
                processA.Start();

                //Start Convert 2. The original file will be converted into the value of 'convertTypeB'.
                var fileSavePathConvertB = fileSavePath.Split('.')[0] + "." + convertTypeB;
                System.Diagnostics.Process processB = new System.Diagnostics.Process();
                System.Diagnostics.ProcessStartInfo startInfoB = new System.Diagnostics.ProcessStartInfo();
                startInfoB.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                startInfoB.FileName = Server.MapPath("~/Books/Calibre Portable/Calibre/") + "ebook-convert.exe";
                startInfoB.Arguments = "\"" + fileSavePath + "\" \"" + fileSavePathConvertB + "\"";
                processB.StartInfo = startInfoB;
                processB.Start();

                //Save the converted files.
                uploadedFile.SaveAs(fileSavePathConvertA);
                uploadedFile.SaveAs(fileSavePathConvertB);

                //Looping through the temp until it finds the first converted file.
                int counter = 0;
                while (!File.Exists(fileSavePathConvertA))
                {
                    counter++;
                }

                //This code will only start if the first converted file is found.
                //If the original file type is PDF it will search for metadeta values. If it isn't the metadata will have a default value.
                if (filetype == "pdf")
                {
                    PdfReader bestand = new PdfReader(fileSavePath);
                    metadata["Title"] = (bestand.Info.ContainsKey("Title")) ? bestand.Info["Title"] : "-";
                    metadata["Subject"] = (bestand.Info.ContainsKey("Subject")) ? bestand.Info["Subject"] : "-";
                    metadata["Author"] = (bestand.Info.ContainsKey("Author")) ? bestand.Info["Author"] : "-";
                    metadata["Keywords"] = (bestand.Info.ContainsKey("Keywords")) ? bestand.Info["Keywords"] : "-";
                }
                else
                {
                    metadata["Title"] = "-";
                    metadata["Subject"] = "-";
                    metadata["Author"] = "-";
                    metadata["Keywords"] = "-";
                }
            }
        }
        else
        {
            //If IsPost and button 'fileupload' does exist.
            //Get all values from the form. Which will be metadata and database values.
            var data_filesize = Request["grootte"];
            var data_type = Request["type"];
            var data_filename = Request["filename"];
            var data_title = "";
            if (Request["titel"] == "-")
            { data_title = data_filename; }
            else { data_title = Request["titel"]; }
            var data_subject = Request["onderwerp"];
            var data_author = Request["auteur"];
            var data_publisher = Request["uitgever"];
            DateTime dateTime;
            //Form value 'uitgavedtm' has a length longer than 10 or equal to ' " " ' then it will get a default value; 
            if (Request["uitgavedtm"].Length > 10 || Request["uitgavedtm"] == "")
            { dateTime = DateTime.Parse("01/01/0001"); }
            else { dateTime = DateTime.Parse(Request["uitgavedtm"], new CultureInfo("nl-NL")); } // Parse form value 'uitgavedtm' to proper a datetime format.
            string data_published = dateTime.ToString();
            string data_publisheddtm = "";

            //If form value 'uitgavedtm' has a value it will read it and correct it to the datetime format.
            //Variable 'data_uitgavedtm's value will be the results.
            if (Request["uitgavedtm"] != "")
            {
                if ((dateTime.Day < 10) && (dateTime.Month < 10))
                {
                    data_publisheddtm = Convert.ToString(("0" + dateTime.Day) + "/" + ("0" + dateTime.Month)) + "/" + (dateTime.Year);
                }
                else
                {
                    if (dateTime.Day < 10)
                    {
                        data_publisheddtm = Convert.ToString(("0" + dateTime.Day) + "/" + (dateTime.Month)) + "/" + (dateTime.Year);
                    }
                    else if (dateTime.Month < 10)
                    {
                        data_publisheddtm = Convert.ToString((dateTime.Day) + "/" + ("0" + dateTime.Month)) + "/" + (dateTime.Year);
                    }
                    else
                    {
                        data_publisheddtm = Convert.ToString((dateTime.Day) + "/" + (dateTime.Month)) + "/" + (dateTime.Year);
                    }
                }
            }//If form value 'uitgavedtm' is equal to ' " " ' it will get the default value. Variable 'dateTime' holds the default value.
            else { data_publisheddtm = data_published.Substring(0, 9); }
            //More values from the form.
            var data_language = Request["taal"];
            var data_genre = Request["genre"];
            var data_description = Request["beschrijving"];
            var data_bookserie = (Request["boekserie"] == " " || Request["boekserie"] == null) ? "-" : Request["boekserie"];
            var data_tags = Request["tags"];
            int currentuser = WebSecurity.CurrentUserId;
            var dirindex = "*" + data_filename;

            //Search through the temp folder for all files equal to 'dirindex's value. 
            //'dirindex's value is original uploaded file but without the full path, just the filename+extension.
            string[] dirs = Directory.GetFiles(Server.MapPath("~/Books/Files/temp/"), dirindex);
            //Variable 'data_filename' value will be the current value but minus the full path and the extenions. e.g. C:/Folder1/Folder2/filename.extension = filename.
            data_filename = data_filename.Split(new[] { "." + data_type }, StringSplitOptions.None)[0];

            //Connect to DB and execute INSERT INTO to add an eBook.
            var db = Database.Open("StarterSite");
            var LastBookID = db.Query("INSERT INTO Books (Gebruiker,Titel,Auteur,Uitgever,UitgaveDatum,Taal,UploadDatum,Path,Beschrijving,Tags,Serie,Beoordeling,Grootte,OriginalFormat,Genre)" +
        "VALUES(@0,@1,@2,@3,@4,@5,@6,@7,@8,@9,@10,@11,@12,@13,@14)",
        currentuser, data_title, data_author, data_publisher, data_publisheddtm, data_language, DateTime.Now, data_filename, data_description, data_tags, data_bookserie, 0, data_filesize, data_type, data_genre);

            //Get last inserted ID.
            long lastId = (long)db.GetLastInsertId();
            db.Query("UPDATE Books SET Path=@0 WHERE Id=@1", lastId + data_filename, lastId);

            //Copy the original file from the temp folder to the correct folder. e.g. PDF file goes to the PDF folder.
            File.Copy(dirs[0], Server.MapPath("~/Books/Files/" + data_type.ToUpper() + "/" + lastId + data_filename + "." + data_type));

            //Variable 'dirIndexA' and 'dirIndexB' will be set to filetypes of the converted files. With these variables we can find the right files that belong to the original one.
            //Variable 'indexA' and 'indexB' will be set to the filetypes of the conververted but without the '.'. e.g. .pdf = pdf. The variables are used to select the right folder. The folder will have the name of all the filetypes
            string dirIndexA = "";
            string dirIndexB = "";
            string indexA = "";
            string indexB = "";
            if (data_type == "pdf") { dirIndexA = data_filename + ".epub"; indexA = "epub"; dirIndexB = data_filename + ".mobi"; indexB = "mobi"; }
            if (data_type == "epub") { dirIndexA = data_filename + ".pdf"; indexA = "pdf"; dirIndexB = data_filename + ".mobi"; indexB = "mobi"; }
            if (data_type == "mobi") { dirIndexA = data_filename + ".pdf"; indexA = "pdf"; dirIndexB = data_filename + ".epub"; indexB = "epub"; }
            var dirIndexAA = "*" + dirIndexA;
            var dirIndexBB = "*" + dirIndexB;
            string[] dirsA = Directory.GetFiles(Server.MapPath("~/Books/Files/temp/"), dirIndexAA);
            string[] dirsB = Directory.GetFiles(Server.MapPath("~/Books/Files/temp/"), dirIndexBB);
            var test = Server.MapPath("~/Books/Files/" + indexA.ToUpper() + "/" + lastId + dirIndexA);
            //Copy the converted files from temp to their folders.
            File.Copy(dirsA[0], Server.MapPath("~/Books/Files/" + indexA.ToUpper() + "/" + lastId + dirIndexA));
            File.Copy(dirsB[0], Server.MapPath("~/Books/Files/" + indexB.ToUpper() + "/" + lastId + dirIndexB));

            //While loop which basically used as timer. This timer will make sure the copy is done and it can start the rest of the code.
            int count = 0;
            while (count != 100000)
            {
                count++;
            }

            //Deleting all files in the temp folder.
            var path = Server.MapPath("~/Books/Files/") + "clearfolder.bat";
            System.Diagnostics.Process.Start(@"" + path + "");

            //Cover image part.
            //The cover will be saved with the same name as the original file's name. All covers will be saved into the 'IMG' folder

            HttpPostedFileBase uploadedImg = Request.Files["images"];

            if (uploadedImg != null && uploadedImg.ContentLength > 0)
            {
                var imgSavePath = Server.MapPath("~/Books/Files/IMG/" + lastId + data_filename + ".png");
                uploadedImg.SaveAs(imgSavePath);
            }
            Session.Abandon();

        }
    }
    else
    {
        Session.Abandon();
    }
}
<script>
    $(document).ready(function () {
        //Submit the form everything the user selects an ebook. This way the user can see or edit the metadata first before uploading the ebook.
        $("input[name=files]").on("change", function () {
            $("input[name=files]").parent().parent().parent().submit();
        });
        //Form adjustments
        $(".file-upload-buttons").hide();
        $("input[name=files]").attr("accept", ".pdf,.epub,.mobi");
        //Create datepicker
        webshims.setOptions('waitReady', false);
        webshims.setOptions('forms-ext', { types: 'date' });
        webshims.polyfill('forms forms-ext');

        $(function () {
            Globalize.culture('nl');
        });
    });
</script>
<div class="row">
    <div class="col-sm-6 col-sm-offset-3">
        <div class="logincard">
            <h1 class="text-center">Boek toevoegen</h1>
            <b>@goodfile</b>
            <b>Bestand : </b><i>@fileName</i>
            <br />
            <br />
            @FileUpload.GetHtml(
        name: "files",
        initialNumberOfFiles: 1,
        allowMoreFilesToBeAdded: false,
        includeFormTag: true,
        uploadText: "Upload")
            <br />
            @if (IsPost)
            {
                //Form only exist if the user didn't press the upload button.
                if (Request.Form["fileupload"] == null)
                {
                    <form method="post"  enctype="multipart/form-data" >
                        <input type="hidden" value=@filesize name="grootte" />
                        <input type="hidden" value=@type name="type" />
                        <input type="hidden" value="@fileName" name="filename" />

                        <div class="input-group">
                            <span class="input-group-addon" id="sizing-addion1">Titel</span>
                            <input type="text" class="form-control" name="titel" value="@metadata["Title"]" />
                        </div>
                        <br />
                        <div class="input-group">
                            <span class="input-group-addon" id="sizing-addion1">Onderwerp</span>
                            <input type="text" class="form-control" name="onderwerp" value="@metadata["Subject"]" />
                        </div>
                        <br />
                        <div class="input-group">
                            <span class="input-group-addon" id="sizing-addion1">Auteur</span>
                            <input type="text" class="form-control" name="auteur" value="@metadata["Author"]" />
                        </div>
                        <br />
                        <div class="input-group">
                            <span class="input-group-addon" id="sizing-addion1">Uitgever</span>
                            <input type="text" class="form-control" name="uitgever" value=@publisher />
                        </div>
                        <br />
                        <div class="input-group">
                            <span class="input-group-addon" id="sizing-addion1">Uitgavedatum</span>
                            <input type="date" class="form-control" name="uitgavedtm" placeholder="09/01/1998"/>
                        </div>
                        <br />
                        <div class="input-group">
                            <span class="input-group-addon" id="sizing-addion1">Taal</span>
                            <input type="text" class="form-control" name="taal" value=@language />
                        </div>
                        <br />
                        <div class="input-group">
                            <span class="input-group-addon" id="sizing-addion1">Genre</span>
                            <input type="text" class="form-control" name="genre" value=@genre />
                        </div>
                        <br />
                        <div class="form-group">
                            <span class="input-group-addon" id="sizing-addion1">Beschrijving</span>
                            <textarea type="text" class="form-control" name="beschrijving" value=@metadata["Keywords"] rows="3"></textarea>
                        </div>
                            <div class="input-group">
                                <span class="input-group-addon" id="sizing-addion1">Cover image </span>
                                <input type="file" class="form-control" accept=".png" name="images" rows="3" style="height: 100%;">
                            </div>
                            <br />
                        <div class="input-group">
                            <span class="input-group-addon" id="sizing-addion1">Boekserie</span>
                            <input type="text" class="form-control" name="boekserie" value=@bookserie />
                        </div>
                        <br />
                        <div class="input-group">
                            <span class="input-group-addon" id="sizing-addion1">Tags</span>
                            <input type="text" class="form-control" name="tags" value=@tags />
                        </div>
                        <br />
                        <input id="upload" class="btn btn-default default-primary-color" type="submit" name="fileupload" value="Upload" /><br />
                    </form>
                }
            }
        </div>
    </div>
</div>