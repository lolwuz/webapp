@using Microsoft.Web.Helpers;
@using System.Globalization;
@using System.Text.RegularExpressions;
@using PdfUtils;
@using iTextSharp;
@using iTextSharp.text;
@using iTextSharp.text.pdf;
@{

    Layout = "~/_BookListLayout.cshtml";
    if (!WebSecurity.IsAuthenticated)
    {
        Response.Redirect("~/default.cshtml");
    }

    var goodfile = Session["goodfile"];
    var bestandstype = "";
    var fileName = "";
    var uitgever = "-";
    var uitgavedtm = "-";
    var taal = "-";
    var beschrijving = "-";
    var boekserie = "-";
    var type = "";
    var grootte = 0;
    var genre = "-";
    HttpPostedFileBase uploadedFile = null;
    Dictionary<String, String> metadata = new Dictionary<String, String>();

    if (IsPost)
    {
        if (Request.Form["fileupload"] == null)
        {
            uploadedFile = Request.Files[0];
            Random rnd = new Random();
            grootte = (uploadedFile.ContentLength / 1024) / 1024;
            type = uploadedFile.FileName.Split('.')[1];
            fileName = Path.GetFileName(uploadedFile.FileName);
            var fileSavePath = Server.MapPath("~/Books/Files/temp/" + rnd.Next(1, 9999) +
               fileName);
            uploadedFile.SaveAs(fileSavePath);
            bestandstype = fileSavePath.Split('.')[1];
            Session["goodfile"] = "";
            string convertTypeA = "";
            string convertTypeB = "";
            if (bestandstype != "pdf" && bestandstype != "epub" && bestandstype != "mobi")
            {
                Session["goodfile"] = "Je moet wel een pdf, epub of mobi bestand uploaden!";
                Response.Redirect("~/Books/BooksAdd.cshtml");
            }
            else
            {
                Session["leeg"] = "";
                if (bestandstype == "pdf")
                {
                    convertTypeA = "epub";
                    convertTypeB = "mobi";
                }
                if (bestandstype == "epub")
                {
                    convertTypeA = "pdf";
                    convertTypeB = "mobi";

                }
                if (bestandstype == "mobi")
                {
                    convertTypeA = "pdf";
                    convertTypeB = "epub";
                }

                var fileSavePathConvertA = fileSavePath.Split('.')[0] + "." + convertTypeA;

                System.Diagnostics.Process processA = new System.Diagnostics.Process();
                System.Diagnostics.ProcessStartInfo startInfoA = new System.Diagnostics.ProcessStartInfo();
                startInfoA.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                startInfoA.FileName = Server.MapPath("~/Books/Calibre Portable/Calibre/") + "ebook-convert.exe";
                startInfoA.Arguments = "\"" + fileSavePath + "\" \"" + fileSavePathConvertA + "\"";
                processA.StartInfo = startInfoA;
                processA.Start();


                var fileSavePathConvertB = fileSavePath.Split('.')[0] + "." + convertTypeB;
                System.Diagnostics.Process processB = new System.Diagnostics.Process();
                System.Diagnostics.ProcessStartInfo startInfoB = new System.Diagnostics.ProcessStartInfo();
                startInfoB.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                startInfoB.FileName = Server.MapPath("~/Books/Calibre Portable/Calibre/") + "ebook-convert.exe";
                startInfoB.Arguments = "\"" + fileSavePath + "\" \"" + fileSavePathConvertB + "\"";
                processB.StartInfo = startInfoB;
                processB.Start();

                uploadedFile.SaveAs(fileSavePathConvertA);
                uploadedFile.SaveAs(fileSavePathConvertB);

                int optellen = 0;
                while (!File.Exists(fileSavePathConvertA))
                {
                    optellen++;
                }

                if (bestandstype == "pdf")
                {
                    PdfReader bestand = new PdfReader(fileSavePath);
                    metadata["Title"] = (bestand.Info.ContainsKey("Title")) ? bestand.Info["Title"] : "-";
                    metadata["Subject"] = (bestand.Info.ContainsKey("Subject")) ? bestand.Info["Subject"] : "-";
                    metadata["Author"] = (bestand.Info.ContainsKey("Author")) ? bestand.Info["Author"] : "-";
                    metadata["Keywords"] = (bestand.Info.ContainsKey("Keywords")) ? bestand.Info["Keywords"] : "-";
                }
                else
                {
                    metadata["Title"] = "-";
                    metadata["Subject"] = "-";
                    metadata["Author"] = "-";
                    metadata["Keywords"] = "-";
                }
            }
        }
        else
        {
            var data_grootte = Request["grootte"];
            var data_type = Request["type"];
            var data_filename = Request["filename"];
            var data_titel = "";
            if (Request["titel"].Length == 0)
            { data_titel = "Onbekend"; }
            else { data_titel = Request["titel"]; }
            var data_onderwerp = Request["onderwerp"];
            var data_auteur = Request["auteur"];
            var data_uitgever = Request["uitgever"];
            DateTime dateTime;
            if (Request["uitgavedtm"].Length > 10 || Request["uitgavedtm"] == "")
            { dateTime = DateTime.Parse("01/01/0001"); }
            else { dateTime = DateTime.Parse(Request["uitgavedtm"], new CultureInfo("nl-NL")); }
            string data_uitgave = dateTime.ToString();
            string data_uitgavedtm = "";

            if (Request["uitgavedtm"] != "")
            {
                if ((dateTime.Day < 10) && (dateTime.Month < 10))
                {
                    data_uitgavedtm = Convert.ToString(("0" + dateTime.Day) + "/" + ("0" + dateTime.Month)) + "/" + (dateTime.Year);
                }
                else
                {
                    if (dateTime.Day < 10)
                    {
                        data_uitgavedtm = Convert.ToString(("0" + dateTime.Day) + "/" + (dateTime.Month)) + "/" + (dateTime.Year);
                    }
                    else if (dateTime.Month < 10)
                    {
                        data_uitgavedtm = Convert.ToString((dateTime.Day) + "/" + ("0" + dateTime.Month)) + "/" + (dateTime.Year);
                    }
                    else
                    {
                        data_uitgavedtm = Convert.ToString((dateTime.Day) + "/" + (dateTime.Month)) + "/" + (dateTime.Year);
                    }
                }
            }
            else { data_uitgavedtm = data_uitgave.Substring(0, 9); }

            var data_taal = Request["taal"];
            var data_genre = Request["genre"];
            var data_beschrijving = Request["beschrijving"];
            var data_boekserie = Request["boekserie"];
            var data_tags = Request["tags"];
            int currentuser = WebSecurity.CurrentUserId;
            var dirindex = "*" + data_filename;
            string[] dirs = Directory.GetFiles(Server.MapPath("~/Books/Files/temp/"), dirindex);
            data_filename = data_filename.Split(new[] { "." + data_type }, StringSplitOptions.None)[0];
            var db = Database.Open("StarterSite");
            var LastBookID = db.Query("INSERT INTO Books (Gebruiker,Titel,Auteur,Uitgever,UitgaveDatum,Taal,UploadDatum,Path,Beschrijving,Tags,Serie,Beoordeling,Grootte,OriginalFormat,Genre)" +
        "VALUES(@0,@1,@2,@3,@4,@5,@6,@7,@8,@9,@10,@11,@12,@13,@14)",
        currentuser, data_titel, data_auteur, data_uitgever, data_uitgavedtm, data_taal, DateTime.Now, data_filename, data_beschrijving, data_tags, data_boekserie, 0, data_grootte, data_type, data_genre);


            long lastId = (long)db.GetLastInsertId();
            db.Query("UPDATE Books SET Path=@0 WHERE Id=@1", lastId + data_filename, lastId);

            File.Copy(dirs[0], Server.MapPath("~/Books/Files/" + data_type.ToUpper() + "/" + lastId + data_filename + "." + data_type));
            string dirIndexA = "";
            string dirIndexB = "";
            string indexA = "";
            string indexB = "";
            if (data_type == "pdf") { dirIndexA = data_filename + ".epub"; indexA = "epub"; dirIndexB = data_filename + ".mobi"; indexB = "mobi"; }
            if (data_type == "epub") { dirIndexA = data_filename + ".pdf"; indexA = "pdf"; dirIndexB = data_filename + ".mobi"; indexB = "mobi"; }
            if (data_type == "mobi") { dirIndexA = data_filename + ".pdf"; indexA = "pdf"; dirIndexB = data_filename + ".epub"; indexB = "epub"; }
            var dirIndexAA = "*" + dirIndexA;
            var dirIndexBB = "*" + dirIndexB;
            string[] dirsA = Directory.GetFiles(Server.MapPath("~/Books/Files/temp/"), dirIndexAA);
            string[] dirsB = Directory.GetFiles(Server.MapPath("~/Books/Files/temp/"), dirIndexBB);
            var test = Server.MapPath("~/Books/Files/" + indexA.ToUpper() + "/" + lastId + dirIndexA);
            File.Copy(dirsA[0], Server.MapPath("~/Books/Files/" + indexA.ToUpper() + "/" + lastId + dirIndexA));
            File.Copy(dirsB[0], Server.MapPath("~/Books/Files/" + indexB.ToUpper() + "/" + lastId + dirIndexB));


            int count = 0;
            while (count != 100000)
            {
                count++;
            }
            var path = Server.MapPath("~/Books/Files/") + "clearfolder.bat";
            System.Diagnostics.Process.Start(@"" + path + "");
            if (data_type == "pdf")
            {

                var searchPath = Server.MapPath("~/Books/Files/PDF/");

                foreach (var filename in Directory.GetFiles(searchPath, lastId + data_filename + ".pdf", SearchOption.TopDirectoryOnly))
                {
                    var images = PdfImageExtractor.ExtractImages(filename);
                    var directory = Server.MapPath("~/Books/Files/IMG/");

                    foreach (var name in images.Keys)
                    {
                        images[name].Save(Path.Combine(directory, name.Split('_')[0] + ".png"));
                    }
                }
            }
            else if (data_type == "epub" || data_type == "mobi")
            {
                HttpPostedFileBase uploadedImg = Request.Files["images"];

                if (uploadedImg != null && uploadedImg.ContentLength > 0)
                {
                    var imgSavePath = Server.MapPath("~/Books/Files/IMG/" + lastId + data_filename + ".png");
                    uploadedImg.SaveAs(imgSavePath);
                }
            }
            Session.Abandon();
        }

    }
    else
    {
        Session.Abandon();
    }
}
<script>
    $(document).ready(function () {
        $("input[name=files]").on("change", function () {
            $("input[name=files]").parent().parent().parent().submit();
        });
        $(".file-upload-buttons").hide();
    });
</script>
<div class="row">
    <div class="col-sm-6 col-sm-offset-3">
        <div class="logincard">
            <h1 class="text-center">Boek toevoegen</h1>
            <b>Bestand : </b><i>@fileName</i>
            <br />
            <br />
            @FileUpload.GetHtml(
        name: "files",
        initialNumberOfFiles: 1,
        allowMoreFilesToBeAdded: false,
        includeFormTag: true,
        uploadText: "Upload")
            <br />
            @if (IsPost)
            {
                if (Request.Form["fileupload"] == null)
                {
                    <form method="post">
                        <input type="hidden" value=@grootte name="grootte" />
                        <input type="hidden" value=@type name="type" />
                        <input type="hidden" value="@fileName" name="filename" />

                        <div class="input-group">
                            <span class="input-group-addon" id="sizing-addion1">Titel</span>
                            <input type="text" class="form-control" name="titel" value="@metadata["Title"]" />
                        </div>
                        <br />
                        <div class="input-group">
                            <span class="input-group-addon" id="sizing-addion1">Onderwerp</span>
                            <input type="text" class="form-control" name="onderwerp" value="@metadata["Subject"]" />
                        </div>
                        <br />
                        <div class="input-group">
                            <span class="input-group-addon" id="sizing-addion1">Auteur</span>
                            <input type="text" class="form-control" name="auteur" value="@metadata["Author"]" />
                        </div>
                        <br />
                        <div class="input-group">
                            <span class="input-group-addon" id="sizing-addion1">Uitgever</span>
                            <input type="text" class="form-control" name="uitgever" value=@uitgever />
                        </div>
                        <br />
                        <div class="input-group">
                            <span class="input-group-addon" id="sizing-addion1">Uitgavedatum</span>
                            <input type="text" class="form-control" name="uitgavedtm" value=@uitgavedtm />
                        </div>
                        <br />
                        <div class="input-group">
                            <span class="input-group-addon" id="sizing-addion1">Taal</span>
                            <input type="text" class="form-control" name="taal" value=@taal />
                        </div>
                        <br />
                        <div class="input-group">
                            <span class="input-group-addon" id="sizing-addion1">Genre</span>
                            <input type="text" class="form-control" name="genre" value=@genre />
                        </div>
                        <br />
                        <div class="form-group">
                            <span class="input-group-addon" id="sizing-addion1">Beschrijving</span>
                            <textarea type="text" class="form-control" name="beschrijving" value=@beschrijving rows="3"></textarea>
                        </div>
                        @if (bestandstype == "epub" || bestandstype == "mobi")
                        {
                            <div class="input-group">
                                <span class="input-group-addon" id="sizing-addion1">Cover image </span>
                                <input type="file" class="form-control" accept=".png" name="images" rows="3" style="height: 100%;">
                            </div>
                            <br />
                        }
                        <div class="input-group">
                            <span class="input-group-addon" id="sizing-addion1">Boekserie</span>
                            <input type="text" class="form-control" name="boekserie" value=@boekserie />
                        </div>
                        <br />
                        <div class="input-group">
                            <span class="input-group-addon" id="sizing-addion1">Tags</span>
                            <input type="text" class="form-control" name="tags" value="@metadata["Keywords"]" />
                        </div>
                        <br />
                        <input id="upload" class="btn btn-default default-primary-color" type="submit" name="fileupload" value="Upload" /><br />
                    </form>
                }
            }
        </div>
    </div>
</div>