{
	"version": "6ece6f065b3d07c7088b59630470fc122bd0512c",
	"signature": "ade2050595f065cf8b63256618c2b05fc96d9dc3",
	"classes": {},
	"baselib": {},
	"nonlocalvars": [],
	"imported_module_ids": [],
	"exports": [
		{
			"name": "strings"
		}
	],
	"outputs": {
		"beautify:true keep_docstrings:true js_version:5": "        function strings() {\n            var string_funcs, exclude, name;\n            string_funcs = set(\"capitalize strip lstrip rstrip islower isupper isspace lower upper swapcase center count endswith startswith find rfind index rindex format join ljust rjust partition rpartition replace split rsplit splitlines zfill\".split(\" \"));\n            if (!arguments.length) {\n                exclude = (function(){\n                    var s = ρσ_set();\n                    s.jsset.add(\"split\");\n                    s.jsset.add(\"replace\");\n                    return s;\n                })();\n            } else if (arguments[0]) {\n                exclude = Array.prototype.slice.call(arguments);\n            } else {\n                exclude = null;\n            }\n            if (exclude) {\n                string_funcs = string_funcs.difference(set(exclude));\n            }\n            var ρσ_Iter0 = ρσ_Iterable(string_funcs);\n            for (var ρσ_Index0 = 0; ρσ_Index0 < ρσ_Iter0.length; ρσ_Index0++) {\n                name = ρσ_Iter0[ρσ_Index0];\n                (ρσ_expr_temp = String.prototype)[(typeof name === \"number\" && name < 0) ? ρσ_expr_temp.length + name : name] = (ρσ_expr_temp = ρσ_str.prototype)[(typeof name === \"number\" && name < 0) ? ρσ_expr_temp.length + name : name];\n            }\n        };\n\n        ρσ_modules.pythonize.strings = strings;\n",
		"beautify:true keep_docstrings:true js_version:6": "        function strings() {\n            var string_funcs, exclude, name;\n            string_funcs = set(\"capitalize strip lstrip rstrip islower isupper isspace lower upper swapcase center count endswith startswith find rfind index rindex format join ljust rjust partition rpartition replace split rsplit splitlines zfill\".split(\" \"));\n            if (!arguments.length) {\n                exclude = (function(){\n                    var s = ρσ_set();\n                    s.jsset.add(\"split\");\n                    s.jsset.add(\"replace\");\n                    return s;\n                })();\n            } else if (arguments[0]) {\n                exclude = Array.prototype.slice.call(arguments);\n            } else {\n                exclude = null;\n            }\n            if (exclude) {\n                string_funcs = string_funcs.difference(set(exclude));\n            }\n            var ρσ_Iter0 = string_funcs;\n            ρσ_Iter0 = ((typeof ρσ_Iter0[Symbol.iterator] === \"function\") ? (ρσ_Iter0 instanceof Map ? ρσ_Iter0.keys() : ρσ_Iter0) : Object.keys(ρσ_Iter0));\n            for (var ρσ_Index0 of ρσ_Iter0) {\n                name = ρσ_Index0;\n                (ρσ_expr_temp = String.prototype)[(typeof name === \"number\" && name < 0) ? ρσ_expr_temp.length + name : name] = (ρσ_expr_temp = ρσ_str.prototype)[(typeof name === \"number\" && name < 0) ? ρσ_expr_temp.length + name : name];\n            }\n        };\n\n        ρσ_modules.pythonize.strings = strings;\n",
		"beautify:true keep_docstrings:false js_version:5": "        function strings() {\n            var string_funcs, exclude, name;\n            string_funcs = set(\"capitalize strip lstrip rstrip islower isupper isspace lower upper swapcase center count endswith startswith find rfind index rindex format join ljust rjust partition rpartition replace split rsplit splitlines zfill\".split(\" \"));\n            if (!arguments.length) {\n                exclude = (function(){\n                    var s = ρσ_set();\n                    s.jsset.add(\"split\");\n                    s.jsset.add(\"replace\");\n                    return s;\n                })();\n            } else if (arguments[0]) {\n                exclude = Array.prototype.slice.call(arguments);\n            } else {\n                exclude = null;\n            }\n            if (exclude) {\n                string_funcs = string_funcs.difference(set(exclude));\n            }\n            var ρσ_Iter0 = ρσ_Iterable(string_funcs);\n            for (var ρσ_Index0 = 0; ρσ_Index0 < ρσ_Iter0.length; ρσ_Index0++) {\n                name = ρσ_Iter0[ρσ_Index0];\n                (ρσ_expr_temp = String.prototype)[(typeof name === \"number\" && name < 0) ? ρσ_expr_temp.length + name : name] = (ρσ_expr_temp = ρσ_str.prototype)[(typeof name === \"number\" && name < 0) ? ρσ_expr_temp.length + name : name];\n            }\n        };\n\n        ρσ_modules.pythonize.strings = strings;\n",
		"beautify:true keep_docstrings:false js_version:6": "        function strings() {\n            var string_funcs, exclude, name;\n            string_funcs = set(\"capitalize strip lstrip rstrip islower isupper isspace lower upper swapcase center count endswith startswith find rfind index rindex format join ljust rjust partition rpartition replace split rsplit splitlines zfill\".split(\" \"));\n            if (!arguments.length) {\n                exclude = (function(){\n                    var s = ρσ_set();\n                    s.jsset.add(\"split\");\n                    s.jsset.add(\"replace\");\n                    return s;\n                })();\n            } else if (arguments[0]) {\n                exclude = Array.prototype.slice.call(arguments);\n            } else {\n                exclude = null;\n            }\n            if (exclude) {\n                string_funcs = string_funcs.difference(set(exclude));\n            }\n            var ρσ_Iter0 = string_funcs;\n            ρσ_Iter0 = ((typeof ρσ_Iter0[Symbol.iterator] === \"function\") ? (ρσ_Iter0 instanceof Map ? ρσ_Iter0.keys() : ρσ_Iter0) : Object.keys(ρσ_Iter0));\n            for (var ρσ_Index0 of ρσ_Iter0) {\n                name = ρσ_Index0;\n                (ρσ_expr_temp = String.prototype)[(typeof name === \"number\" && name < 0) ? ρσ_expr_temp.length + name : name] = (ρσ_expr_temp = ρσ_str.prototype)[(typeof name === \"number\" && name < 0) ? ρσ_expr_temp.length + name : name];\n            }\n        };\n\n        ρσ_modules.pythonize.strings = strings;\n",
		"beautify:false keep_docstrings:true js_version:5": "function strings(){var string_funcs,exclude,name;string_funcs=set(\"capitalize strip lstrip rstrip islower isupper isspace lower upper swapcase center count endswith startswith find rfind index rindex format join ljust rjust partition rpartition replace split rsplit splitlines zfill\".split(\" \"));if(!arguments.length){exclude=(function(){var s=ρσ_set();s.jsset.add(\"split\");s.jsset.add(\"replace\");return s})()}else if(arguments[0]){exclude=Array.prototype.slice.call(arguments)}else{exclude=null}if(exclude){string_funcs=string_funcs.difference(set(exclude))}var ρσ_Iter0=ρσ_Iterable(string_funcs);for(var ρσ_Index0=0;ρσ_Index0<ρσ_Iter0.length;ρσ_Index0++){name=ρσ_Iter0[ρσ_Index0];(ρσ_expr_temp=String.prototype)[(typeof name===\"number\"&&name<0)?ρσ_expr_temp.length+name:name]=(ρσ_expr_temp=ρσ_str.prototype)[(typeof name===\"number\"&&name<0)?ρσ_expr_temp.length+name:name]}};ρσ_modules.pythonize.strings=strings",
		"beautify:false keep_docstrings:true js_version:6": "function strings(){var string_funcs,exclude,name;string_funcs=set(\"capitalize strip lstrip rstrip islower isupper isspace lower upper swapcase center count endswith startswith find rfind index rindex format join ljust rjust partition rpartition replace split rsplit splitlines zfill\".split(\" \"));if(!arguments.length){exclude=(function(){var s=ρσ_set();s.jsset.add(\"split\");s.jsset.add(\"replace\");return s})()}else if(arguments[0]){exclude=Array.prototype.slice.call(arguments)}else{exclude=null}if(exclude){string_funcs=string_funcs.difference(set(exclude))}var ρσ_Iter0=string_funcs;ρσ_Iter0=((typeof ρσ_Iter0[Symbol.iterator]===\"function\")?(ρσ_Iter0 instanceof Map?ρσ_Iter0.keys():ρσ_Iter0):Object.keys(ρσ_Iter0));for(var ρσ_Index0 of ρσ_Iter0){name=ρσ_Index0;(ρσ_expr_temp=String.prototype)[(typeof name===\"number\"&&name<0)?ρσ_expr_temp.length+name:name]=(ρσ_expr_temp=ρσ_str.prototype)[(typeof name===\"number\"&&name<0)?ρσ_expr_temp.length+name:name]}};ρσ_modules.pythonize.strings=strings",
		"beautify:false keep_docstrings:false js_version:5": "function strings(){var string_funcs,exclude,name;string_funcs=set(\"capitalize strip lstrip rstrip islower isupper isspace lower upper swapcase center count endswith startswith find rfind index rindex format join ljust rjust partition rpartition replace split rsplit splitlines zfill\".split(\" \"));if(!arguments.length){exclude=(function(){var s=ρσ_set();s.jsset.add(\"split\");s.jsset.add(\"replace\");return s})()}else if(arguments[0]){exclude=Array.prototype.slice.call(arguments)}else{exclude=null}if(exclude){string_funcs=string_funcs.difference(set(exclude))}var ρσ_Iter0=ρσ_Iterable(string_funcs);for(var ρσ_Index0=0;ρσ_Index0<ρσ_Iter0.length;ρσ_Index0++){name=ρσ_Iter0[ρσ_Index0];(ρσ_expr_temp=String.prototype)[(typeof name===\"number\"&&name<0)?ρσ_expr_temp.length+name:name]=(ρσ_expr_temp=ρσ_str.prototype)[(typeof name===\"number\"&&name<0)?ρσ_expr_temp.length+name:name]}};ρσ_modules.pythonize.strings=strings",
		"beautify:false keep_docstrings:false js_version:6": "function strings(){var string_funcs,exclude,name;string_funcs=set(\"capitalize strip lstrip rstrip islower isupper isspace lower upper swapcase center count endswith startswith find rfind index rindex format join ljust rjust partition rpartition replace split rsplit splitlines zfill\".split(\" \"));if(!arguments.length){exclude=(function(){var s=ρσ_set();s.jsset.add(\"split\");s.jsset.add(\"replace\");return s})()}else if(arguments[0]){exclude=Array.prototype.slice.call(arguments)}else{exclude=null}if(exclude){string_funcs=string_funcs.difference(set(exclude))}var ρσ_Iter0=string_funcs;ρσ_Iter0=((typeof ρσ_Iter0[Symbol.iterator]===\"function\")?(ρσ_Iter0 instanceof Map?ρσ_Iter0.keys():ρσ_Iter0):Object.keys(ρσ_Iter0));for(var ρσ_Index0 of ρσ_Iter0){name=ρσ_Index0;(ρσ_expr_temp=String.prototype)[(typeof name===\"number\"&&name<0)?ρσ_expr_temp.length+name:name]=(ρσ_expr_temp=ρσ_str.prototype)[(typeof name===\"number\"&&name<0)?ρσ_expr_temp.length+name:name]}};ρσ_modules.pythonize.strings=strings"
	},
	"discard_asserts": false
}