@using System.Text.RegularExpressions;

@functions{
    // function for remove the Line title from fetch-meta-data.exe output. 
    public string RemoveLineTitle(string line, string lineName)
    {
        line = line.Remove(0, lineName.Length + 2);
        return line;
    }

    // Check If meta-data is equal to, non-existent or diffent from fetch-data.
    public string checkSucces(string local, string internet)
    {
        if(local == internet)
        {
            return "has-success has-feedback"; // Metadata is matching. 
        }
        else if(internet.IsEmpty()){
            return "has-error"; // No feedback
        }
        else
        {
            return "has-warning has-feedback"; // There is no metadata found. 
        }
    }
}

@{
    if (!WebSecurity.IsAuthenticated)
    {
        Response.Redirect("~/Default.cshtml");
    }

    Page.Title = "Automatisch Metadata updaten";
    Layout = "~/_BookListLayout.cshtml";

    // Getting book list from database. 
    List<int> selectedId = Session["selectListId"] as List<int>;
    Database db = Database.Open("StarterSite");

    // Fetch meta-data variables
    string title = "-";
    string authors = "-";
    string publisher = "-";
    string tags = "-";
    string series = "-";
    string languages = "-";
    string rating = "-";
    string published = "-";
    string identifiers = "-";
    string comments = "-";

    int bookId = 0;

    if (!Request.QueryString["id"].IsEmpty())
    {
        // Check if Id is in selectedList
        bookId = Request.QueryString["id"].AsInt();
        if (selectedId.IndexOf(bookId) != -1)
        {

            string searchQuery = "SELECT * FROM Books WHERE Id=@0";
            var searchRow = db.QuerySingle(searchQuery, bookId);

            // Start calibre fetch metadata process (fetch-ebook-metadata.exe)
            try
            {
                System.Diagnostics.Process processA = new System.Diagnostics.Process();
                System.Diagnostics.ProcessStartInfo startInfoA = new System.Diagnostics.ProcessStartInfo();
                startInfoA.WindowStyle = System.Diagnostics.ProcessWindowStyle.Normal;

                startInfoA.FileName = Server.MapPath("~/Books/Calibre Portable/Calibre/") + "fetch-ebook-metadata.exe";
                startInfoA.Arguments = "-t:" + "\"" + searchRow.Titel + "\"" + " -a:" + "\"" + searchRow.Auteur + "\"";
                startInfoA.UseShellExecute = false;
                startInfoA.RedirectStandardOutput = true;

                processA.StartInfo = startInfoA;
                processA.Start();

                // Getting the output lines.
                while (!processA.StandardOutput.EndOfStream)
                {
                    string line = processA.StandardOutput.ReadLine();


                    // Work out what info is being given in a line.
                    string lineName = "";
                    foreach(char c in line)
                    {
                        if(c == ':')
                        {
                            break;
                        }
                        else
                        {
                            // Add char to list name.
                            lineName += c;
                        }
                    }

                    // Remove Titles. 
                    switch (Regex.Replace(lineName, @"\s+", ""))
                    {
                        case "Title":
                            title = RemoveLineTitle(line, lineName);
                            break;
                        case "Author(s)":
                            authors = RemoveLineTitle(line, lineName);
                            break;
                        case "Publisher":
                            publisher = RemoveLineTitle(line, lineName);
                            break;
                        case "Tags":
                            tags = RemoveLineTitle(line, lineName);
                            break;
                        case "Series":
                            series = RemoveLineTitle(line, lineName);
                            break;
                        case "Languages":
                            languages = RemoveLineTitle(line, lineName);
                            break;
                        case "Rating":
                            rating = RemoveLineTitle(line, lineName);
                            break;
                        case "Published":
                            published = RemoveLineTitle(line, lineName);
                            break;
                        case "Identifiers":
                            identifiers = RemoveLineTitle(line, lineName);
                            break;
                        case "Comments":
                            comments = RemoveLineTitle(line, lineName);
                            break;
                        default:
                            break;
                    }
                    <!-- For debugging purposes.-->
                    @*<h4>@lineName</h4>
                    <p>@line</p>*@
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }
    }

    if (IsPost)
    {
        //redirect and don't do anything
        if (Request.Form["actionButton"] == "behouden")
        {
            Response.Redirect("~/Books/BooksUpdate.cshtml");
        }
        //Update book all book data.
        else if (Request.Form["actionButton"] == "updaten")
        {
            // Validations
            Validation.Add(("inputtitel"), Validator.StringLength(100, 0, "De Titel mag niet langer zijn dan 100 tekens."));
            Validation.Add(("inputauthor"), Validator.StringLength(100, 0, "De auteur mag niet langer zijn dan 100 tekens."));
            Validation.Add(("inputuitgever"), Validator.StringLength(100, 0, "De uitgever mag niet langer zijn dan 100 tekens."));
            Validation.Add(("inputuitgave"), Validator.StringLength(10, 0, "De uitgavedatum mag niet langer zijn dan 10 tekens."));
            Validation.Add(("inputtaal"), Validator.StringLength(100, 0, "De taal mag niet langer zijn dan 100 tekens."));
            Validation.Add(("inputcomment"), Validator.StringLength(2000, 0, "De beschrijving mag niet langer zijn dan 100 tekens."));
            Validation.Add(("inputtags"), Validator.StringLength(200, 0, "De Auteur mag niet langer zijn dan 200 tekens."));
            Validation.Add(("inputserie"), Validator.StringLength(25, 0, "De serie mag niet langer zijn dan 25 tekens."));
            Validation.Add(("inputrating"), Validator.Range(1, 5, "Beoordeling moet tussen de 1 en 5 zitten"));

            if (Validation.IsValid())
            {
                // Get user input.
                string inputtitel = Request.Form["inputtitel"];
                string inputauthor = Request.Form["inputauthor"];
                string inputuitgever = Request.Form["inputuitgever"];
                string inputuitgave = Request.Form["inputuitgave"];
                string inputtaal = Request.Form["inputtaal"];
                string inputcomment = Request.Form["inputcomment"];
                string inputtags = Request.Form["inputtags"];
                string inputserie = Request.Form["inputserie"];
                int inputrating = Request.Form["inputrating"].AsInt();

                var updateStatement = "UPDATE Books SET Auteur =@0, Uitgever =@1, UitgaveDatum =@2, Taal =@3, Beschrijving =@4, Tags =@5, Serie =@6, Beoordeling =@7, titel =@8 WHERE Id =@9";
                db.Execute(updateStatement, inputauthor, inputuitgever, inputuitgave, inputtaal, inputcomment, inputtags, inputserie, inputrating, inputtitel, bookId);

                // Return to bookList
                Response.Redirect("~/List.cshtml");
            }
        }
    }
}

<form method="post">
    @AntiForgery.GetHtml()
    <div class="container">
        <h4>Automatisch metadata updaten</h4>
        <p>Vergelijk de metadata hieronder </p>
        <button class="btn btn-danger accent-color" name="actionButton" value="updaten">Updaten</button>
        <button class="btn" name="actionButton" value="behouden">Behouden</button>
        <hr />
    </div>

    <div class="container">
        <div class="row">
            <div class="col-sm-6">
                <div class="bookinfocard">
                    <div class="bookinfoheading">
                        <h4 class="text-center">Opgeslagen metadata</h4>
                    </div>
                    <div class="bookinfobody">
                        @{
                            var statement = "SELECT * FROM Books WHERE Id=@0";
                            var row = db.QuerySingle(statement, bookId);
                        }

                        <div class="input-group">
                            <span class="input-group-addon">Titel</span>
                            <input type="text" class="form-control" value="@row.Titel" disabled>
                        </div>
                        <br />

                        <div class="input-group">
                            <span class="input-group-addon">Auteur</span>
                            <input type="text" class="form-control" value="@row.Auteur" disabled>
                        </div>
                        <br />

                        <div class="input-group">
                            <span class="input-group-addon">Uitgever</span>
                            <input type="text" class="form-control" value="@row.Uitgever" disabled>
                        </div>
                        <br />

                        <div class="input-group">
                            <span class="input-group-addon">Tags</span>
                            <input type="text" class="form-control" value="@row.Tags" disabled>
                        </div>
                        <br />

                        <div class="input-group">
                            <span class="input-group-addon">Taal</span>
                            <input type="text" class="form-control" value="@row.Taal" disabled>
                        </div>
                        <br />

                        <div class="input-group">
                            <span class="input-group-addon">Uitgave-Datum</span>
                            <input type="text" class="form-control formfill" value="@row.UitgaveDatum" disabled>
                        </div>
                        <br />

                        <div class="form-group">
                            <span class="input-group-addon">Beschrijving</span>
                            <textarea class="form-control" rows="5" id="comment" value="@row.Beschrijving" disabled></textarea>
                        </div>
                        <br />
                    </div>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="bookinfocard">
                    <div class="bookinfoheading">
                        <h4 class="text-center">Gevonden metadata</h4>
                    </div>

                    <div class="bookinfobody">
                        <ul>
                            @{
                                string lastError = "";
                                foreach (var error in Validation.GetErrors())
                                {
                                    if (!(error == lastError))
                                    {
                                        lastError = error;
                                        <li>@error</li>
                                    }
                                }
                            }
                        </ul>

                        <div class="input-group @checkSucces(row.Titel, title)">
                            <span class="input-group-addon">Titel</span>
                            <input type="text" class="form-control" name="inputtitel" value="@title">
                        </div>
                        <br />

                        <div class="input-group @checkSucces(row.Auteur, authors)">
                            <span class="input-group-addon">Auteur</span>
                            <input type="text" class="form-control"  name="inputauthor" value="@authors">
                        </div>
                        <br />

                        <div class="input-group @checkSucces(row.Uitgever, publisher)">
                            <span class="input-group-addon">Uitgever</span>
                            <input type="text" class="form-control"  name="inputuitgever" value="@publisher">
                        </div>
                        <br />

                        <div class="input-group @checkSucces(row.Tags, tags)">
                            <span class="input-group-addon">Tags</span>
                            <input type="text" class="form-control"  name="inputtags" value="@tags">
                        </div>
                        <br />

                        <div class="input-group @checkSucces(row.Taal, languages)">
                            <span class="input-group-addon">Taal</span>
                            <input type="text" class="form-control"  name="inputtaal" value="@languages">
                        </div>
                        <br />

                        <div class="input-group @checkSucces(row.UitgaveDatum, published)">
                            <span class="input-group-addon">Uitgave-datum</span>
                            <input type="text" class="form-control" name="inputuitgave" value="@published">
                        </div>
                        <br />

                        <div class="form-group @checkSucces(row.Auteur, comments)">
                            <span class="input-group-addon">Beschrijving</span>
                            <textarea class="form-control" rows="5" id="comment"  name="inputcomment" value="@comments"></textarea>
                        </div>
                        <br />
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>